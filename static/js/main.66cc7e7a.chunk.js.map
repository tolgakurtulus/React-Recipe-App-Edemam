{"version":3,"sources":["component/Recipe.jsx","component/LoadingContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calorie","image","ingredients","className","map","ingredient","text","src","alt","LoadingContainer","class","App","useState","recipe","setRecipe","search","setSearch","loading","setLoading","query","setQuery","useEffect","getRecipe","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","required","index","key","label","calories","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAkBeA,G,MAfA,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACvC,OACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,qBAAqBJ,GACnC,4BACGG,EAAYE,KAAI,SAAAC,GAAU,OACzB,4BAAKA,EAAWC,UAGpB,wCAAcN,GACd,yBAAKG,UAAU,gBAAgBI,IAAKN,EAAOO,IAAI,QCFtCC,G,YARU,WACvB,OACE,oCACE,0BAAMC,MAAM,sBCoEHC,EArEH,WACV,IADgB,EAIYC,mBAAS,IAJrB,mBAITC,EAJS,KAIDC,EAJC,OAKYF,mBAAS,IALrB,mBAKTG,EALS,KAKDC,EALC,OAMcJ,oBAAS,GANvB,mBAMTK,EANS,KAMAC,EANA,OAOUN,mBAAS,QAPnB,mBAOTO,EAPS,KAOFC,EAPE,KAShBC,qBAAU,WACRC,MAEC,CAACH,IAEJ,IAAMG,EAAS,uCAAG,8BAAAC,EAAA,6DAChBL,GAAW,GADK,SAEOM,MAAM,mCAAD,OACSL,EADT,mBAff,WAee,oBAdd,qCAYE,cAEVM,EAFU,OAKhBP,GAAW,GALK,SAMGO,EAASC,OANZ,OAMVC,EANU,OAOhBb,EAAUa,EAAKC,MAPC,2CAAH,qDAoBf,OACE,yBAAKzB,UAAU,OACb,0BAAM0B,SARQ,SAACC,GACfA,EAAEC,iBACFX,EAASL,GACTC,EAAU,KAKiBb,UAAU,iBACnC,2BACEA,UAAU,eACV6B,KAAK,OACLC,MAAOlB,EACPmB,SAjBa,SAACJ,GACpBd,EAAUc,EAAEK,OAAOF,QAiBbG,SAAS,SAEX,4BAAQjC,UAAU,kBAAkB6B,KAAK,UAAzC,WAIF,yBAAK7B,UAAU,SACZc,GAAWA,EAER,kBAAC,EAAD,MAEAJ,EAAOT,KAAI,SAACS,EAAQwB,GAAT,OACT,kBAAC,EAAD,CACEC,IAAKD,EACLtC,MAAOc,EAAOA,OAAO0B,MACrBvC,QAASa,EAAOA,OAAO2B,SACvBvC,MAAOY,EAAOA,OAAOZ,MACrBC,YAAaW,EAAOA,OAAOX,oBCpDvBuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.66cc7e7a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Recipe.scss\";\r\n\r\nconst Recipe = ({ title, calorie, image, ingredients }) => {\r\n  return (\r\n    <div className=\"c-card\">\r\n      <h2 className=\"c-card__headtitle\">{title}</h2>\r\n      <ol>\r\n        {ingredients.map(ingredient => (\r\n          <li>{ingredient.text}</li>\r\n        ))}\r\n      </ol>\r\n      <p>Calorie : {calorie}</p>\r\n      <img className=\"c-card__image\" src={image} alt=\"\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React from \"react\";\r\nimport \"./LoadingContainer.scss\";\r\n\r\nconst LoadingContainer = () => {\r\n  return (\r\n    <>\r\n      <span class=\"smooth spinner\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoadingContainer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Recipe from \"./component/Recipe.jsx\";\r\nimport \"./App.scss\";\r\nimport LoadingContainer from \"./component/LoadingContainer\";\r\n\r\nconst App = () => {\r\n  const APP_ID = \"dbbd7f6f\";\r\n  const APP_KEY = \"278118ad594740551b401fff3b389f13\";\r\n\r\n  const [recipe, setRecipe] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [query, setQuery] = useState(\"meat\");\r\n\r\n  useEffect(() => {\r\n    getRecipe();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [query]);\r\n\r\n  const getRecipe = async () => {\r\n    setLoading(true);\r\n    const response = await fetch(\r\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\r\n    );\r\n    setLoading(false);\r\n    const data = await response.json();\r\n    setRecipe(data.hits);\r\n  };\r\n\r\n  const updateSearch = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const getSearch = (e) => {\r\n      e.preventDefault();\r\n      setQuery(search);\r\n      setSearch(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <form onSubmit={getSearch} className=\"c-search-form\">\r\n        <input\r\n          className=\"c-search-bar\"\r\n          type=\"text\"\r\n          value={search}\r\n          onChange={updateSearch}\r\n          required=\"true\"\r\n        />\r\n        <button className=\"c-search-button\" type=\"submit\">\r\n          Search\r\n        </button>\r\n      </form>\r\n      <div className=\"c-row\">\r\n        {loading && loading\r\n          ? (\r\n            <LoadingContainer />\r\n          ) : (\r\n            recipe.map((recipe, index) => (\r\n              <Recipe\r\n                key={index}\r\n                title={recipe.recipe.label}\r\n                calorie={recipe.recipe.calories}\r\n                image={recipe.recipe.image}\r\n                ingredients={recipe.recipe.ingredients}\r\n              />\r\n            ))\r\n          )\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}